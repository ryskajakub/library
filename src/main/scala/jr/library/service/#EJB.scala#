package cz.dzogchen.library.service

import javax.mail.Message
import javax.mail.Session
import javax.mail.Transport
import javax.mail.internet.InternetAddress
import javax.mail.internet.MimeMessage
import javax.persistence._
import javax.ejb._
import java.util.Date
import java.io.Serializable
import java.lang.{Long => JLong}
import java.util.logging.Logger
import javax.annotation._
import org.scala_libs.jpa.ScalaEntityManager
import scala.reflect._
import cz.dzogchen.library.model._
import scala.collection.JavaConversions._

class Sem(manager:EntityManager) extends ScalaEntityManager{
	val em = manager
	val factory = null
    val bc = (1 :: Nil).map((x) => x + 1)
}

trait GenericBean[A <: SuperEntity]{
	@PersistenceContext
	var manager : EntityManager = _
	var sem : ScalaEntityManager = _
	@PostConstruct
	def injectManager(){
		sem = new Sem(manager)
	}
	def save(entity:A){
		sem.mergeAndFlush(entity)
	}
	def findAll(implicit m:Manifest[A]) = {
		val res = sem.createNamedQuery(m.erasure.getSimpleName + ".findAll")
		.getResultList
		res.foreach((x:SuperEntity) => x.initializeLazyFields)
		res
	}
	def delete(id:JLong)(implicit m:Manifest[A]) {
		val maybeEntity = sem.find(m.erasure,id)
		maybeEntity match {
			case Some(x:AnyRef) => sem.remove(x)
			case _ => ;
		}
		sem.flush
	}
	def delete(entity:A) {
		sem.remove(entity)
		sem.flush
	}
}
trait GenericNameBean[A <: WithName] extends GenericBean[A]{
	def findByName(name:String)(implicit m:Manifest[A]):Option[A] = {
		val entity = sem
		.createNamedQuery(m.erasure.getSimpleName + ".findByName")
		.setParams("name" -> name)
		.findOne
		entity
	}
}

@Stateless
@LocalBean
class LibraryBean extends GenericBean[Library] {
	def findByPlace(place:String):Option[Library] = {
		val entity = sem
		.createNamedQuery("Library.findByPlace")
		.setParams("place" -> place)
		.findOne
		entity
	}
}

@Stateless
@LocalBean
class BookBean extends GenericNameBean[Book]{
	override def findAll(implicit m:Manifest[Book]) = {
		val res = sem.createNamedQuery(m.erasure.getSimpleName + ".findAll")
		.getResultList
		res.foreach((x:Book) => {
				x.initializeLazyFields
				x.bookCopies.foreach(_.initializeLazyFields)
			})
		res
	}
}

@Stateless
@LocalBean
class LibrarianActionBean extends GenericBean[LibrarianAction]

@Stateless
@LocalBean
class BookCopyBean extends GenericBean[BookCopy] {
	def findByCode(code:String):Option[BookCopy] = {
		val book = sem
			.createNamedQuery("BookCopy.findByCode")
			.setParams(("code" -> code))
			.findOne
		book.map((x:BookCopy) => x.initializeLazyFields)
		book
	}
	def findAllLentBooks = {
		val all = sem
			.createNamedQuery("BookCopy.findAllLentBooks")
			.findAll
			all.foreach((x:BookCopy) => x.initializeLazyFields)
		all
	}
}

@Stateless
@LocalBean
class AuthorBean extends GenericNameBean[Author]

case class MyTuple(id:JLong,message:EmailType.Value) extends Serializable

object EmailType extends Enumeration{
	val fortnight, initial, warning = Value
}

@Stateless
@LocalBean
class BorrowBean extends GenericBean[Borrow] {
	@Resource
	var ts:TimerService = _
	@Resource(name = "mail/librarySession")
	var mail:Session = _
	override def save(b:Borrow) {
		val borrow = sem.mergeAndFlush(b)
		ts.createTimer(new Date(System.currentTimeMillis + (Borrow.day * 30)),
							MyTuple(borrow.id,EmailType.warning))
		ts.createTimer(new Date(System.currentTimeMillis + (Borrow.day * 14)),
							MyTuple(borrow.id,EmailType.fortnight))
		Logger.getAnonymousLogger.severe("timers created")
	}
	def sendMail(s:String,borrow:Borrow){
		Logger.getAnonymousLogger.severe("sending email with" + s)
		val message = new MimeMessage(mail)
		message.setRecipients(Message.RecipientType.TO,borrow.person.email)
		message.setSubject("Subject")
		message.setText("Kniha:" + borrow.bookCopy.book)
		Logger.getAnonymousLogger.severe("address" + borrow.person.email)
		Transport.send(message)
		Logger.getAnonymousLogger.severe("sending email finished")
	}
	@Timeout
	def catchTimer(timer:Timer){
		Logger.getAnonymousLogger.severe("in timeout")
		val myTuple = timer.getInfo.asInstanceOf[MyTuple]
		val borrowType = (sem.find(classOf[Borrow],myTuple.id) -> myTuple.message)
		borrowType match {
			case (None,_) =>
			case (Some(x),_) if x.realTo != null =>
			case (Some(x),EmailType.fortnight) => sendMail("fortnight",x)
			case (Some(x),EmailType.warning) => sendMail("warning",x)
			case _ =>
		}
	}
	def findAllPending =
		sem.createNamedQuery("Borrow.findAllPending")
			.getResultList
}

@Stateless
@LocalBean
class PersonBean extends GenericNameBean[Person] 

@Stateless
@LocalBean
class LibrarianBean extends GenericBean[Librarian] {
	def login(username:String,password:String,library:Library):Option[Tuple2[Librarian,Library]] = {
		val librarian:Option[Librarian] =
			sem
			.createNamedQuery("Librarian.login")
			.setParams( ("username" -> username))
			.findOne
		librarian match {
			case Some(x:Librarian) if (x.permittedLibraries.contains(library)) => Some(Tuple2(x,library))
			case _ => None
		}
	}
}
